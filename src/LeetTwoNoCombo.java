import java.util.*;

public class LeetTwoNoCombo {


//    Given two arrays of integers nums1 and nums2, return the number of triplets formed (type 1 and type 2) under the following rules:
//
//    Type 1: Triplet (i, j, k) if nums1[i]2 == nums2[j] * nums2[k] where 0 <= i < nums1.length and 0 <= j < k < nums2.length.
//    Type 2: Triplet (i, j, k) if nums2[i]2 == nums1[j] * nums1[k] where 0 <= i < nums2.length and 0 <= j < k < nums1.length.

//    Input: nums1 = [1,1], nums2 = [1,1,1]
//    Output: 9
//    Explanation: All Triplets are valid, because 1^2 = 1 * 1.
//    Type 1: (0,0,1), (0,0,2), (0,1,2), (1,0,1), (1,0,2), (1,1,2).  nums1[i]^2 = nums2[j] * nums2[k].
//    Type 2: (0,0,1), (1,0,1), (2,0,1). nums2[i]^2 = nums1[j] * nums1[k].

        public int numTriplets(int[] nums1, int[] nums2) {
            int count = 0;
            LeetTwoNoCombo twoCmb= new LeetTwoNoCombo();

            for (int i = 0; i < nums1.length; i++) {
                count = count+twoCmb.findcom(nums2, nums2.length, nums1[i]);
               // System.out.println(count);
            }
            return count;
        }

        public int findcom(int[] A, int n, int K){
            int count = 0;
            int i = 0;
            int j = i+1;
            while( i < j && i<A.length-1) {
              //System.out.println(A[i]+","+A[j]+"___"+K);
                if((long)A[i] * (long)A[j] == ((long)K*(long)K) ){
                //    System.out.println(A[i]*A[j]+"=="+(K*K));
                    ++count;
                }
                if(j == n-1) {
                    ++i;
                    j=i;
                }
                j++;
            }
      //   System.out.println(count);
            return count;

        }

    public static void main(String[] args) {
        int[] nums1 = {};
        int[] nums2 = {};
        LeetTwoNoCombo lTC = new LeetTwoNoCombo();
        //Print Sum of Approach //Type1 Approach       +     //Type2 Approach
      //  System.out.println(lTC.numTriplets(nums1,nums2)+lTC.numTriplets(nums2,nums1));
        //n(O) Approach
        System.out.println(lTC.nOApproach(nums1,nums2)+lTC.nOApproach(nums2,nums1));

    }
        public int nOApproach(int[] nums1, int[] nums2){
            int count =0;
            Map<Long,Integer> countMap = new HashMap<>();
            for (int i :nums1)
            countMap.put((long)i*i,countMap.getOrDefault((long)i*i,0)+1);

            for (int i = 0; i < nums1.length-1; i++) {
                for (int j = i+1; j <nums2.length ; j++) {
                    if(countMap.containsKey ((long) nums1[i] * nums2[j])) {
                        count = count + countMap.get((long) nums1[i] * nums2[j]);
                    }
                }
            }
            return count;
        }

}
